version: "3"

services:
  frontend:
    depends_on:
      api-gateway:
        condition: service_started
      matching-producer:
        condition: service_started
      matching-consumer:
        condition: service_started
      collaboration-service:
        condition: service_started
      user-service:
        condition: service_started
      question-service:
        condition: service_started
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:1234
      - NEXT_PUBLIC_GITHUB_OAUTH_CLIENT_ID=${GITHUB_CLIENT_ID}
      - NEXT_PUBLIC_GITHUB_OAUTH_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
      - NEXT_PUBLIC_COLLAB_SERVICE_URL=ws://localhost:5005
      - NEXTAUTH_SECRET=nextauth_secret
      - NEXTAUTH_URL=http://localhost:3000
      - NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dgxltgjxl
      - NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET=usohal3c
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    ports:
      - "3000:3000" # Maps container port 3000 to local 3000

  api-gateway:
    container_name: api-gateway
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.dev
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=apigateway
      - POSTGRES_HOST=db-agw
      - ACCESS_TOKEN_SECRET_KEY=super_secret_key
      - REFRESH_TOKEN_SECRET_KEY=super_secret_key
      - USER_SERVICE_URL=http://user-service:8080
      - QUESTION_SERVICE_URL=http://question-service:8080
      - COLLAB_SERVICE_URL=http://collaboration-service:8080
      - MATCHING_SERVICE_URL=http://matching-producer:8080
      - AGW_URL=http://localhost:1234
      - FRONTEND_URL=http://localhost:3000
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - SUPER_ADMIN_KEY=i_want_to_be_superadmin
    ports:
      - "1234:1234"  # Maps container port 1234 to local 1234
    volumes:
      - ./backend/api-gateway:/usr/src/app
    networks:
      - peerpreps-backend
    depends_on:
      db-agw:
        condition: service_healthy

  collaboration-service:
    container_name: collaboration-service
    build:
      context: ./backend/collaboration-service
      dockerfile: Dockerfile.dev
    ports:
      - "5005:8080" # Maps container port 8080 to local 5005
    environment:
      QUESTION_SERVICE_URL: http://question-service:8080
    volumes:
      -  ./backend/collaboration-service:/usr/src/app
    networks:
      - peerpreps-backend

  user-service:
    container_name: user-service
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.dev
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users
      - AGW_URL=http://localhost:1234
      - POSTGRES_HOST=db-us
    ports:
      - "5006:8080" # Maps container port 8080 to local 5006
    volumes:
      - ./backend/user-service:/usr/src/app
    depends_on:
      db-us:
        condition: service_healthy
    networks:
      - peerpreps-backend

  matching-producer:
    container_name: matching-producer
    build:
      context: ./backend/matching-service/producer
      dockerfile: Dockerfile.dev
    ports:
      - "5007:8080"
    environment:
      - AMQP_SERVER_URL=amqp://guest:guest@rabbitmq:5672/
      - AGW_URL=http://localhost:1234
    networks:
      - peerpreps-backend
      - rabbitmq-network
    volumes:
      - ./backend/matching-service/producer:/usr/src/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: on-failure

  matching-consumer:
    container_name: matching-consumer
    build:
      context: ./backend/matching-service/consumer
      dockerfile: Dockerfile.dev
    ports:
      - "5008:8080"
    environment:
      - AMQP_SERVER_URL=amqp://guest:guest@rabbitmq:5672/
      - COLLAB_URL=http://collaboration-service:8080
      - RMQ_QUEUE_URL=http://rabbitmq:15672/api/queues/%2f/
    networks:
      - peerpreps-backend
      - rabbitmq-network
    volumes:
      - ./backend/matching-service/consumer:/usr/src/app
    depends_on:
      matching-producer:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: on-failure

  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    container_name: rabbitmq
    networks:
      - peerpreps-backend
      - rabbitmq-network
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "nc", "-z", "rabbitmq", "5672" ]
      interval: 5s
      timeout: 10s
      retries: 5

  question-service:
      container_name: question-service
      build:
        context: ./backend/question-service
        dockerfile: Dockerfile.dev
      environment:
        - MONGO_URI=mongodb://mongodb:27017
        - AGW_URL=http://localhost:1234
      ports:
        - "5009:8080" # Maps container port 8080 to local 5009
      volumes:
        - ./backend/question-service:/usr/src/app
      depends_on:
        mongodb:
          condition: service_started
      networks:
        - peerpreps-backend

  mongodb:
    image: mongo:7.0.1
    container_name: mongodb-question-service
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - db-data:/data/db
    networks:
      - peerpreps-backend

  db-us:
    image: postgres:16rc1-alpine3.18
    container_name: postgres-user-service
    restart: always
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "users", "-p", "5432" ]
      interval: 5s
      timeout: 60s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - ./scripts/init_user_db.sh:/docker-entrypoint-initdb.d/init_user_db.sh
      - data:/var/lib/postgresql/data
    networks:
      - peerpreps-backend

  db-agw:
    image: postgres:16rc1-alpine3.18
    container_name: postgres-api-gateway
    restart: always
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=apigateway
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "apigateway", "-p", "5433" ]
      interval: 5s
      timeout: 60s
      retries: 5
    ports:
      - 5433:5432
    volumes:
      - ./scripts/init_apigw_db.sh:/docker-entrypoint-initdb.d/init_apigw_db.sh
      - agw-data:/var/lib/postgresql/data
    networks:
      - peerpreps-backend

volumes:
  data: {}
  db-data: {}
  agw-data: {}

networks:
  peerpreps-backend:
    driver: bridge
  rabbitmq-network:
    driver: bridge
