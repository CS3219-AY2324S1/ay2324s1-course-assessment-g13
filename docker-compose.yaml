version: "3"

services:
  frontend:
    depends_on:
      matching-service:
        condition: service_started
      collaboration-service:
        condition: service_started
      user-service:
        condition: service_started
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/.next
    ports:
      - 3000:3000

  collaboration-service:
    container_name: collaboration-service
    build:
      context: ./backend/collaboration-service
      dockerfile: Dockerfile.stage
    ports:
      - "5005:8080" # Maps container port 8080 to local 5005
    volumes:
      - .:/usr/src/app


  user-service:
    container_name: user-service
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.stage
    env_file:
      - ./backend/user-service/.env
    ports:
      - "5006:8080"
    volumes:
      - .:/usr/src/app
    depends_on:
      db:
        condition: service_started

  matching-service:
    container_name: matching-service
    build:
      context: ./backend/matching-service
      dockerfile: Dockerfile.stage
    ports:
      - "5007:8080" # Maps container port 8080 to local 5007
    volumes:
      - .:/usr/src/app

  db:
    image: postgres:16rc1-alpine3.18
    container_name: postgres
    restart: always
    env_file:
      - ./backend/user-service/.env
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - data:/var/lib/postgresql/data

volumes:
  data: {}